<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>数学 &#8211; GGapa&#039;s website</title>
	<atom:link href="http://ggapa.net/tag/%E6%95%B0%E5%AD%A6/feed/?simply_static_page=2486" rel="self" type="application/rss+xml" />
	<link>https://ggapa.github.io/</link>
	<description></description>
	<lastBuildDate>Fri, 09 Feb 2024 12:44:42 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>https://ggapa.github.io/wp-content/uploads/2023/08/cropped-Untitled-32x32.png</url>
	<title>数学 &#8211; GGapa&#039;s website</title>
	<link>https://ggapa.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>对数</title>
		<link>https://ggapa.github.io/2023/11/18/%e5%af%b9%e6%95%b0/</link>
					<comments>https://ggapa.github.io/2023/11/18/%e5%af%b9%e6%95%b0/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sat, 18 Nov 2023 15:08:08 +0000</pubDate>
				<category><![CDATA[笔记]]></category>
		<category><![CDATA[数学]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=956</guid>

					<description><![CDATA[1 什么是对数 如果 $a^x = N(a&#62;0, a \neq 1, N&#62;0)$ 则 $x$ 叫做 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>1 什么是对数</h1>
<p>如果 $a^x = N(a&gt;0, a \neq 1, N&gt;0)$ 则 $x$ 叫做以 $a$ 为底 $N$ 的对数，记做 $x=\log_aN$ , 其中 $N$ 被称为真数。</p>
<p>若对数的底数为 $10$ 则记作 $\lg N$，若对数的底数为自然底数 $e$，则记作 $\ln N$ 。</p>
<h1>2 对数的运算法则</h1>
<h2>2.1 对数的基本运算</h2>
<ol>
<li>$log_a M + log_aN = log_aMN$ </li>
<li>$log_aM - log_aN = log_a\frac{M}{N}$</li>
<li>$\log_ab^x=x\log_ab$ </li>
</ol>
<h2>2.2 换底公式</h2>
<p>基本公式：$\frac{\log_cb}{\log_ca} = \log_ab ,c&gt;0, c\neq1,a\neq1$</p>
<blockquote>
<p>证明：已知 $\log_ab = x \Leftrightarrow a^x = b$  则 $\log_c a^x = \log_c b$ </p>
<p>由对数的基本运算 $3$ 可知：$x\log_ca = log_cb$ </p>
<p>故 $x = \frac{\log_cb}{\log_ca} = \log_ab$</p>
</blockquote>
<p>扩展1：$\frac{1}{\log_ba} = \log_ab,b\neq 1$ </p>
<blockquote>
<p>证明：已知 $\frac{\log_cb}{\log_ca} = \log_ab$</p>
<p>当 $c=b$ 时, $\frac{1}{\log_ba} = \log_ab$</p>
</blockquote>
<p>扩展2：$\log_{a^x}b^y = \frac{y}{x}\cdot\log_ab$</p>
<blockquote>
<p>证明：$\log_{a^x}b^y=y\log_{a^x}b = y \cdot \frac{1}{\log_ba^x} = y \cdot \frac{1}{x\log_b^a} = \frac{y}{x}\cdot\log_ab$</p>
</blockquote>
<hr />
<p>$\mathrm{{\Large Example1} } $</p>
<p><strong>问题描述</strong></p>
<p>求 $\log_48$ 的值。</p>
<p><strong>分析与解答</strong></p>
<ul>
<li>方法一：利用换底公式可知 $\log_48 = \frac{\log_28}{\log_24} = \frac{3}{2}$</li>
<li>方法二：利用换底公式扩展二可直接求出答案 $\frac{3}{2}$</li>
</ul>
<p>$\mathrm{{\Large Example2} } $</p>
<p><strong>题目描述</strong></p>
<p>证明： $\log_ab \cdot\log_bc\cdot \log_ca = 1$<br />
<strong>分析与解答</strong></p>
<p>此题最大的难点为每个对数的底数不同，为了使他们的底数相同可使用基本换底公式。</p>
<p>原式可化为 $\log_ab \cdot \frac{\log_ac}{\log_ab} \cdot  a\frac{\log_aa}{\log_ac} = \log_aa = 1$ </p>
<h2>3.2 对数函数的图像</h2>
<p>对于函数 $y=\log_ax$ ,$a^y = x$：</p>
<ul>
<li>当 $a &gt; 1 $ 时，$y$ 随着 $x$ 的增大而增大；当 $y=0$ 时， $x = 1$。</li>
<li>当 $a &lt;  1$ 时，$y$ 随着 $x$ 的增大而减小；当 $y=0$ 时， $x = 1$。</li>
</ul>
<p>若两个对数函数的底数互为倒数，则两个函数关于 $x$ 轴，对称。</p>
<p>函数的底数越大，函数的增长速度越慢。</p>
<p>$\mathrm{{\Large Example1} } $</p>
<p><strong>问题描述</strong></p>
<p>已知 $a=2^{1.1},b=\log_23,c=3^{\log_3\frac{3}{2}}$ ,求 $a,b,c$ 的大小关系。</p>
<p><strong>分析与解答</strong></p>
<p>此题的关键在于估算。</p>
<p>$a = 2^{1.1} \approx 2^1 \approx  2$</p>
<p>$b = \log_23 \Leftrightarrow 2^b = 3 \Rightarrow b &lt; 2 &lt; a$</p>
<p>$c =3^{ \log_3\frac{3}{2} } = \frac{3}{2} = \log_22^\frac{3}{2} = \log_2\sqrt{8} &lt; \log_23$ </p>
<p>故 $a&gt;b&gt;c$.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/11/18/%e5%af%b9%e6%95%b0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>函数性质的综合问题</title>
		<link>https://ggapa.github.io/2023/11/04/%e5%87%bd%e6%95%b0%e6%80%a7%e8%b4%a8%e7%9a%84%e7%bb%bc%e5%90%88%e9%97%ae%e9%a2%98/</link>
					<comments>https://ggapa.github.io/2023/11/04/%e5%87%bd%e6%95%b0%e6%80%a7%e8%b4%a8%e7%9a%84%e7%bb%bc%e5%90%88%e9%97%ae%e9%a2%98/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sat, 04 Nov 2023 08:03:46 +0000</pubDate>
				<category><![CDATA[笔记]]></category>
		<category><![CDATA[数学]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=805</guid>

					<description><![CDATA[函数的图像变换问题 基础部分： $y=f(x)$ 左移 $n$ 个单位得到：$y=f(x+n)$ $y=f(x [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>函数的图像变换问题</h1>
<p>基础部分：</p>
<ul>
<li>$y=f(x)$ 左移 $n$ 个单位得到：$y=f(x+n)$</li>
<li>$y=f(x)$ 上移 $n$ 个单位得到：$y=f(x)+n$</li>
<li>$y=f(x)$ 翻折可得 $y=|f(x)|$</li>
</ul>
<p>令一个函数的定义域为 $D,\forall x\in D,-x \in D$ 且 $f(x)$ 为偶函数时：</p>
<ul>
<li>$f(x)=f(-x)=f(|x|)$</li>
<li>函数中只能由偶次项存在例如：$y=x^2$是偶函数；而 $y=(x^2+x)$ 因为次数项为 $1$ 的系数不为 $0$ 故不是偶函数</li>
</ul>
<p>当 $f(x)$ 为奇函数时：</p>
<ul>
<li>$-f(x)=f(-x)$</li>
<li>函数中只能有奇次项存在</li>
</ul>
<hr />
<p>知道了以上的基础部分之后，我们就可以做进一步的探究：</p>
<p>若 $f(x)$ 关于 $x=t$ 对称，则有：</p>
<ul>
<li>$f(t-x)=f(t+x)$ </li>
<li>$f(2t-x)=f(x)$</li>
<li>$f(-x)= f(x+2t)$</li>
</ul>
<p>同样的，若我们知道了以上信息中的任意一条，我们便可以很快捷的求出函数的对称轴。</p>
<p>若 $f(x)$ 关于点 $(a,b)$ 中心对称：</p>
<ul>
<li>$f(a-x)=-f(a+x)$ </li>
<li>$f(2a-x)=-f(x)$</li>
<li>$f(-x)= -f(x+2a)$</li>
<li>$f(a+t)+f(a-t)=b$</li>
</ul>
<h1>对勾函数</h1>
<p>令 $f(x)=x+\frac{1}{x},x\in (-\infty, 0) \cup (0,\infty)$ ， $f(x)$ 是一个奇函数，如下图所示：</p>
<p><img decoding="async" src="https://z1.ax1x.com/2023/11/04/piMxqPg.png" alt="piMxqPg.png" style="zoom: 72%;" /></p>
<p>值域：$(-\infty,-2]\cup [2,+\infty]$</p>
<p>单调递增区间：$(-\infty, -1), (1, \infty)$</p>
<p>单调递减区间：$(-1, 0), (0, 1)$</p>
<hr />
<p>令 $f(x)=bx+\frac{a}{x},x\in (-\infty, 0) \cup (0,\infty),a&gt;0$ 由基本不等式可得：$x+\frac{a}{x}\ge 2\sqrt{a}$ ，在 $x = \sqrt{a}$ 的时候可以取到函数在第一象限内的最小值，若 $x = -\sqrt{a}$  时，可以取到函数在第三象限内的最大值。函数会趋近于 $y=bx$</p>
<hr />
<p>令 $f(x)=x-\frac{1}{x},x\in (-\infty, 0) \cup (0,\infty)$ ， $f(x)$ 是一个奇函数，如下图所示：</p>
<p><img decoding="async" src="https://z1.ax1x.com/2023/11/04/piMzlJe.png" style="zoom: 80%;" /></p>
<h1>函数的凹凸性</h1>
<p>令 $y=\sqrt{x}，0&lt;x_1&lt;x_2$ ，证明：$\frac{f(x_1)+f(x_2)}{2} &lt;f(\frac{x_1+x_2}{2} )$  </p>
<p>代数证明：</p>
<p>$\because \frac{f(x_1)+f(x_2)}{2} = \frac{\sqrt{x_1}+\sqrt{x_2}}{2}, f(\frac{x_1+x_2}{2})=\sqrt{\frac{x_1+x_2}{2}}$</p>
<p>令 $\sqrt{x_1} = a, \sqrt{x_2} = b$</p>
<p>$\therefore x_1=a^2, x_2 = b^2$</p>
<p>$\therefore \frac{a+b}{2}&lt;\sqrt{\frac{a^2+b^2}{2}}$</p>
<p>几何证明：</p>
<p>在 $y=\sqrt{x}$ 的函数图像上任取两点 $A, B$</p>
<p>$A(x_1, f(x_1)), B(x_2, f(x_2))$</p>
<p>连接 $AB$ 取线段 $AB$  的中点标记为 $N$ </p>
<p>过 $N$ 作 $x$ 轴的垂线交 $f(x)$ 于点 $M$</p>
<p>$N(\frac{x_1+x_2}{2}, \frac{f(x_1)+f(x_2)}{2}), M(\frac{x_1+x_2}{2}, f(\frac{x_1+x_2}{2}))$</p>
<p>点 $M$ 在 点 $N$ 的上方，可以证明 $\frac{f(x_1)+f(x_2)}{2} &lt;f(\frac{x_1+x_2}{2} )$ </p>
<p><img decoding="async" src="https://z1.ax1x.com/2023/11/04/piQSp6A.png" alt="" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/11/04/%e5%87%bd%e6%95%b0%e6%80%a7%e8%b4%a8%e7%9a%84%e7%bb%bc%e5%90%88%e9%97%ae%e9%a2%98/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>浅谈基本不等式问题</title>
		<link>https://ggapa.github.io/2023/10/28/%e6%b5%85%e8%b0%88%e5%9f%ba%e6%9c%ac%e4%b8%8d%e7%ad%89%e5%bc%8f%e9%97%ae%e9%a2%98/</link>
					<comments>https://ggapa.github.io/2023/10/28/%e6%b5%85%e8%b0%88%e5%9f%ba%e6%9c%ac%e4%b8%8d%e7%ad%89%e5%bc%8f%e9%97%ae%e9%a2%98/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sat, 28 Oct 2023 08:45:16 +0000</pubDate>
				<category><![CDATA[笔记]]></category>
		<category><![CDATA[数学]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=686</guid>

					<description><![CDATA[$$\frac{2}{\frac{1}{a}+\frac{1}{b}} \le \sqrt{ab} \le \ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>$$\frac{2}{\frac{1}{a}+\frac{1}{b}} \le \sqrt{ab} \le \frac{a+b}{2} \le \sqrt{\frac{a^2+b^2}{2}}$$</p>
<h1>${ \mathrm{Example\enspace 1}}  $</h1>
<h5>问题描述</h5>
<p>已知 $x &gt;0, y &gt; 0$ 且 $2x + 8y - xy = 0$ 求 $x + y$ 的最小值</p>
<h5>分析与解答</h5>
<p>通过<code>1的代换</code>来解决问题</p>
<p>考虑将 $2x + 8y - xy = 0$ 化简可得：</p>
<p>$2x + 8y = xy$ 两边同乘 $\frac{1}{xy}$ 可得：</p>
<p>$ \frac{2}{y}  + \frac{2}{x} =1 $</p>
<p>$ \because x+y=(x+y)\cdot 1 $</p>
<p>$\therefore (x+y)=(x+y)(\frac{8}{x}+\frac{2}{y}  )=\frac{2x}{y} +\frac{8y}{x} +10$</p>
<p>$\because x&gt;0,y&gt;0 $</p>
<p>$\therefore \frac{2x}{y} +\frac{8y}{x} \ge2\sqrt[]{16} $</p>
<p>当且仅当 $x = 6, y = 12$ 时 $(\frac{2x}{y} +\frac{8y}{x})_{min}=8$ </p>
<p>此时 $(x+y)_{min}=18$</p>
<h1>${ \mathrm{Example\enspace 2}}  $</h1>
<h5>问题描述</h5>
<p>已知 $x，y&gt; 0,x+2y+xy-6=0$，解决下列问题：</p>
<ol>
<li>求 $xy$ 的最大值</li>
<li>$x+2y$的最小值</li>
<li>$x+y$ 的最小值</li>
<li>$(x+2)^2+(y+1)^2$的最小值</li>
</ol>
<h5>分析与解答</h5>
<p>$ \mathrm{{\Large 第一问} } $</p>
<p>第一问可以使用基本不等式可将 $x+2y\Rightarrow \sqrt{2xy}$ 然后进行因式分解：</p>
<p>$\because x+2y \ge  \sqrt{2xy},x+2y+xy-6=0$</p>
<p>$\therefore 2\sqrt{2xy}+xy-6 \le 0$</p>
<p>$\because x,y&gt;0$</p>
<p>$\therefore (\sqrt[]{xy} )^2+2\sqrt[]{2xy} -6\le 0$</p>
<p>$=(\sqrt[]{xy} )^2+2\sqrt[]{2} \sqrt[]{xy} -6\le 0$</p>
<p>若将上面的不等式中的 $\sqrt{xy}$ 看成一个整体，可得一个一元二次不等式，可解得：</p>
<p>$0 &lt; \sqrt[]{xy}  \le\sqrt[]{2} $</p>
<p>$0 \le {xy}  \le 2$</p>
<p>$\therefore  xy_{max}=2$</p>
<hr />
<p>$ \mathrm{{\Large 第二问} } $</p>
<p>由第一问可得 $xy_{max}=2$</p>
<p>$\because x+2y=6-xy$</p>
<p>$ \therefore  (x+2y)_{max}=6-xy_{min} = 6-2=4$</p>
<hr />
<p>$ \mathrm{{\Large 第三问} } $</p>
<p>$\because x+2y+xy-6=0$</p>
<p>$\therefore 2y+xy=6-x \Rightarrow y(2+x)=(6-x) \Rightarrow y=\frac{6-x}{2+x} $</p>
<p>$\therefore x+y=x+\frac{6-x}{2+x}=x-\frac{2+x-8}{2+x} =x-1+\frac{8}{x+2} =x+2+\frac{8}{x+2} -3$</p>
<p>$\because x &gt; 0$</p>
<p>$\therefore  x+2+\frac{8}{x+2} \ge 2\sqrt[]{8}$ 当且仅当 $x+2=\frac{8}{x+2}=\sqrt{8}$ 时，等号成立，此时 $x=\sqrt{8}-2$</p>
<p>$\therefore (x+y)_{min}= (x+2+\frac{8}{x+2})_{min}-3=4\sqrt[]{2} -3$</p>
<hr />
<p>$ \mathrm{{\Large 第四问} } $</p>
<p>*<em>步骤可能可以简化</em></p>
<p>由第三问可知 $y=\frac{6-x}{2+x},   x+2+\frac{8}{x+2} \ge 2\sqrt[]{8}$</p>
<p>$\therefore (x+2)^2+(y+1)=(x+2)^2+(\frac{6-x}{2+x}+1)=(x+2)^2+(\frac{8}{2+x})^2=(x+2)^2+\frac{8^2}{(2+x)^2}$</p>
<p>$\because \frac{8^2}{(2+x)^2},(x+2)^2\ge 0$</p>
<p>$\therefore (x+2)^2+\frac{8^2}{(2+x)^2}\ge 2\sqrt[]{8^2} =16$ 当且仅当 $ (x+2)^2=\frac{8^2}{(2+x)^2}=8$ 时成立<br />
此时 $x=\sqrt{8}-2$</p>
<p>$\therefore [(x+2)^2+(y+1)^2]_{min}=16$</p>
<h5>总结</h5>
<p>此题乍看可以使<code>1的代换</code>但深究发现因为有常数的存在而不能使用。此题利用了<strong>整体思想/换元法</strong>和<strong>消元法</strong>。</p>
<ul>
<li>若发现分母较为复杂可使用<strong>整体思想/换元法</strong></li>
<li>通过<strong>因式分解</strong>将多个未知数化简为一个未知数或许能方便运算</li>
<li>分子上有未知数时一定要设法删除</li>
<li>注意符号的改变</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/10/28/%e6%b5%85%e8%b0%88%e5%9f%ba%e6%9c%ac%e4%b8%8d%e7%ad%89%e5%bc%8f%e9%97%ae%e9%a2%98/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>数论相关知识</title>
		<link>https://ggapa.github.io/2023/08/16/oi%e5%ad%a6%e4%b9%a0-%e6%95%b0%e5%ad%a6/</link>
					<comments>https://ggapa.github.io/2023/08/16/oi%e5%ad%a6%e4%b9%a0-%e6%95%b0%e5%ad%a6/#comments</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Wed, 16 Aug 2023 04:27:42 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[科创]]></category>
		<category><![CDATA[数学]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=216</guid>

					<description><![CDATA[Update on 2023.08.19：修改了一处笔误 Update on 2023.11.03：增添内容  [&#8230;]]]></description>
										<content:encoded><![CDATA[<ul>
<li>Update on 2023.08.19：修改了一处笔误</li>
<li>Update on 2023.11.03：增添内容</li>
<li>Update on 2023.12.15：因数部分</li>
</ul>
<p><strong>注：远古作品，写的很垃圾</strong></p>
<h1>数论</h1>
<h2>线性筛</h2>
<pre><code class="language-cpp">bitset&lt;100000&gt; vis;
vector&lt;int&gt; p;

void init() {
    p.push_back(-1);
    for (int i = 2; i &lt;= 100000; i++) {
        if (!vis[i]) p.push_back(i);
        for (int j = 1; j &lt;= p.size() &amp;&amp; i * p[j] &lt;= 100000; j++) {
            vis[i * p[j]] = 1;
            if (i % p[j] == 0) break;
        }
    }
}
</code></pre>
<p>通过给上面的代码添加一点小小的修改，我们就可以得到了一个既能筛质数，也能分解质因子的函数</p>
<pre><code class="language-cpp">int n, T, p[maxn / 10], Min[maxn];      //Min中存的元素便是一个数最小的质因子
void GetPrime() {
    for (int i = 2; i &lt;= maxn; i++) {
        if (!vis[i]) {
            p[++p[0]] = i;
            Min[i] = i;
        }
        for (int j = 1; j &lt;= p[0] &amp;&amp; 1ll * i * p[j] &lt; maxn; j++) {
            vis[i * p[j]] = 1;
            Min[i * p[j]] = p[j];
            if (i % p[j] == 0)
                break;
        }
    }
}</code></pre>
<p>给定一个数然后求出它所有的质因子。</p>
<pre><code class="language-cpp">cin &gt;&gt; x;
while(x &gt; 1)  x /= Min[x];</code></pre>
<p>这么做一定是可行的，利用了<code>算术基本定理</code>。</p>
<p>他的更多扩展用法：</p>
<p>$pri_i$： 编号为 $i$ 的质数。</p>
<p>$mi_i$ ：$i$ 的最小质因子。</p>
<p>$phi_i$： $\varphi(i)$ 的值（欧拉函数）。</p>
<p>$mu_i$：$\mu(i)$ 的值（莫比乌斯函数）。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
const int maxn = 20000000 + 5;

int pri[maxn], phi[maxn], mi[maxn], mu[maxn];
bitset&lt;maxn&gt; vis;

void init(){
    mu[1] = 1;
    for(int i = 2; i &lt;= maxn - 5; i++) {
        if(!vis[i]) pri[++pri[0]] = i, mi[i] = i, phi[i] = i - 1, mu[i] = -1;
        for(int j = 1; j &lt;= pri[0] &amp;&amp; i * pri[j] &lt;= maxn - 5; j++) {
            int tt = i * pri[j];
            vis[tt] = 1;
            mi[tt] = pri[j];
            if(i % pri[j] == 0) {
                phi[tt]  = phi[i] * pri[j];
                break;
            }
            else phi[tt] = phi[i] * phi[pri[j]];
            mu[tt] = -mu[i];
        }
    }
}

int main() {
    freopen(&quot;a.out&quot;, &quot;w&quot;, stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    init();
    printf(&quot;%d\n&quot;, mu[6]);

    return 0;   
} 
</code></pre>
<p>当然，筛法还能有更多的应用，他还能在因子上下功夫。</p>
<h2>唯一分解定理</h2>
<p>$$n = \prod_{i=1}^{m} p_{i}^{k_i}$$</p>
<h3>唯一分解定理与 LCM、GCD 之间的关系</h3>
<p>设有两个数：$a = \prod_{i=1}^{m_a} pa_{i}^{ka_i}$ 、$b = \prod_{i=1}^{m_b} pb_{i}^{kb_i}$，则有：</p>
<p>它们的 $\gcd$ 为二者 $k$ 取 $\min$ ，而 $lcm$ 为二者的 $k$ 取 $\max$</p>
<h2>因子</h2>
<h3>因子和</h3>
<p>由算数基本定理可得，一个数 $n$ 一定可以被以下的式子表示出来：</p>
<p>$$n = \prod_{i=1}^{m} p_{i}^{k_i}$$</p>
<p>后文中默认 $p$ 从小到大排序并编号<br />
其中 $p$ 是质数，$k$ 是一个非负整数，$m$ 表示该数最少可以被几个素数表示，试求：</p>
<p>$$\sum_{d|n}^{}d $$ </p>
<p>通过一系列的推到可以得出</p>
<p>$$\sum_{d|n}^{}d = \prod_{i=1}^{m}  \sum_{j=0}^{k_i} p_i^j$$</p>
<p>推到过程如下：</p>
<p>对于每一个质数 $p_i$ 他的不同次方可以构成一个集合，笔者拿 $360$ 来举例：</p>
<p>已知 :</p>
<p>$$360 = 2^3\cdot3^2 \cdot5^1$$</p>
<p>$360$ 被分解成了三个质数，那么其所有的因数都能通过这三个质数不同次幂的乘积表示。例如 $2^1\cdot3^0 \cdot5^0$，$2^1\cdot3^0 \cdot5^1$，$2^2\cdot3^1 \cdot5^0$ ，等等。像这样的数，都是 $360$ 的因数。</p>
<p>其因数和等于：</p>
<p>$$2^0 \cdot 3^0 \cdot 5^0 + 2^0 \cdot 3^0 \cdot 5^1 + 2^0 \cdot 3^1 \cdot 5^0 + 2^0 \cdot 3^1 \cdot 5^1 + 2^0 \cdot 3^2 \cdot 5^0+ \cdots + 2^3 \cdot 3^2 \cdot 5^1$$</p>
<p>化简可得：</p>
<p>$$(1 + 2^1 + 2^2 + 2^3)\cdot(1+3^1+3^2) \cdot (1+5^1) = \prod_{i=1}^{3} \sum_{j=0}^{k_i}  {p_i}^j $$</p>
<p>推导完毕。</p>
<h3>代码实现</h3>
<p><strong>问题描述</strong></p>
<p>给定一个数 $n$ 求  $[1,n]$ 中所有数的因子和。</p>
<p><strong>分析与解答</strong></p>
<p>为了在 $O(n)$ 的时间复杂度内解决问题，上述题目可以通过线性筛来解决；</p>
<p>我们定义 $f_i$，代表 $i$ 的因子和。</p>
<p>定义 $g_i$ 代表：</p>
<p>$$\sum_{j=0}^{k_1}  {p_1}^j$$</p>
<p>我们该如何处理这两个数组？</p>
<p>对于每次循环得到的 $i$，若 $i$ 是质数（情况一），$f_i = i + 1$ ，$g_i = i + 1$。不做过多赘述。</p>
<p>否则，我们已经知道了 $i$ 的唯一分解式，有两种情况需要我们考虑：</p>
<p>定义 $t = i\times prime_j$</p>
<ul>
<li>若 $i$ 的唯一分解式中不含 $prime_j$ 时，也就是 $i$ 模 $prime_j$ 不为 $0$ 时（情况二）。</li>
</ul>
<p>则 $g_t = prime_j+1$， $f_t = f_i \times g_t$。</p>
<p>举一个例子：</p>
<p>若此时 $i$ 的唯一分解式为 $3^2\cdot5^1$，$prime_j=2$，满足情况二。此时 $t$ 的唯一分解式为 $3^3\cdot4^1$， $g_i = 1+3^1+3^2$，$f_i = (1+3^1+3^2)\times(1+5^1)$。</p>
<p>经过推导可知：</p>
<p>$$g_t = 1 + 2 = 1 + prime_j$$</p>
<p>$$ f_t = (1+2^1)\times(1+3^1+3^2)\times(1+5^1) = g_t\times f_i$$</p>
<ul>
<li>若 $i$ 的唯一分解式中包含 $prime_j$ 时，也就是 $i$ 模 $prime_j$ 为 $0$ 时（情况三）。</li>
</ul>
<p>则 $g_t = g_i \times prime_j + 1$， $f_t = \frac{f_i \times g_t}{g_i}$</p>
<p>举一个例子：</p>
<p>若此时 $i$ 的唯一分解式为 $2^2\cdot3^1$，$prime_j=2$，满足情况三。此时 $t$ 的唯一分解式为 $2^3\cdot3^1$， $g_i = 1+2^1+2^2$，$f_i = (1+2^1+2^2)\times(1+3^1)$。</p>
<p>经过推导可知：</p>
<p>$$g_t = 1+2^1+2^2+2^3=(1+2^1+2^2)\times2+1=g_i\cdot prime_j+1$$</p>
<p>$$f_t= (1+2^1+2^2+2^3)\times(1+3^1) = \frac{(1+2^1+2^2)\times(1+3^1)}{(1+2^1+2^2)}\times (1+2^1+2^2+2^3) =\frac{f_i }{g_i}\times g_t$$</p>
<h4>参考代码</h4>
<pre><code class="language-cpp">void sol() {
    for(int i = 2; i &lt;= n; i++) {
        if(!vis[i]) p[++p[0]] = i, f[i] = g[i] = 1 + i;//情况一
        for(int j = 1, t; (t = i * p[j]) &lt;= n &amp;&amp; j &lt;= p[0]; j++) {
            vis[t] = 1;
            if(i % p[j]) g[t]  = p[j] + 1, f[t] = f[i] * g[t]; //情况二
            else {  //情况三
                g[t] = g[i] * p[j] + 1;
                f[t] = f[i] / g[i]  * g[t];
                break;
            }
        }
    }
}</code></pre>
<h2>不定方程</h2>
<h3>定义</h3>
<p>形如 $ax + by = c$，其中 $a, b, c$ 是已知数的方程被称为二元一次不定方程。</p>
<h3>求解</h3>
<p><strong>定理</strong>：方程 $ax + by = c$ 有解当且仅当 $gcd(a, b) | c$<br />
先考虑如何求 $ax + by = gcd(a, b)$</p>
<p>$$ax + by = gcd(a, b)$$</p>
<p>$$= gcd(b, a \bmod {b}) $$</p>
<p>$$=bx′ + (a \bmod {b})y′$$</p>
<p>$$=bx′ + (a − ⌊ \frac{a}{b}⌋ × b)y′$$</p>
<p>$$=y′ + b(x′ − ⌊\frac{a}{b}⌋y′)$$</p>
<p>其中 $x′$ 和 $y′$ 是不定方程 $bx + (a \bmod {b})y = gcd(b, a \bmod {b})$的解。</p>
<p>如果求出了 $x′$ 和 $y′$，就可以根据对应系数相等算出 $x = y′$，$y = x′ − ⌊ \frac{a}{b}⌋y′$。</p>
<h2>同余</h2>
<p>对两个整数 $a, b$，如果它们除以 $d$ 的余数相同，则称它们 模 $d$ 同余，记作:</p>
<p>$$a \equiv b \enspace(\bmod{d})$$</p>
<h2>威尔逊定理</h2>
<p>正整数 $p$ 是质数的充要条件为 $(p − 1)! ≡ −1 (\bmod p)$。</p>
<h2>欧拉函数</h2>
<h3>定义</h3>
<p>定义欧拉函数 $\varphi(n)$ 表示小于 $n$ 的数中与 $n$ 互质的数的个数；特别的，$\varphi(1) = 1$。</p>
<h3>性质</h3>
<p>积性：如果 $gcd(a, b) = 1$，则 $\varphi(a × b) = \varphi(a) × \varphi(b)$。</p>
<p>欧拉反演：$\sum_{d|n}  \varphi(d) = n。$</p>
<p>性质3：对任意实数$p，\varphi(p^k) = p^k − p^{k−1}$。</p>
<h3>计算</h3>
<p><strong>单个欧拉函数</strong>：设 $n$ 的唯一分解式是：</p>
<p>$$n = p_1^{k_1} p_2^{k_2} \cdots p_s^{k^s}$$</p>
<p>由性质3可得</p>
<p>$$\varphi (n) =  {\textstyle \prod_{i=1}^{s}\varphi(p_i^{k_i})} $$</p>
<p><strong>线性欧拉函数</strong>：在线性筛的同时可以筛出欧拉函数，设 $p$ 是 $i$ 的最小质因子，分三种情况讨论：</p>
<ol>
<li>
<p>$i$ 为质数：$\varphi (i) = i − 1$</p>
</li>
<li>
<p>$p$ 是 $\frac{i}{p}$ 的质因子：$\varphi (i) = \varphi(\frac{i}{p}) × p$。</p>
</li>
<li>
<p>$p$ 和 $\frac{i}{p}$ 互质：$\varphi(i) = \varphi(\frac{i}{p})\varphi(p)$。</p>
</li>
</ol>
<p>[hidden tip="你知道的太多了！"]我真的受不了了！！！一个晚上就只写了这么点。数论真<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" />毒瘤QAQ$\enspace\enspace\enspace\enspace$--20230815[/hidden]</p>
<h2>逆元</h2>
<h3>定义</h3>
<p>在模 $p$ 同余下，对每个 $x$，能找到一个整数 $x^{−1} ∈ [1, p)$，使任何数除以 $x$ 等价于乘 $x^{−1}$。这样的 $x^{−1}$ 称为 $x$ 在模 $p$ 同余下的逆元。</p>
<p>显然，逆元 $x$ 应满足 $xx^{−1} ≡ 1 (\bmod p)$。</p>
<p>以容易理解的角度来讲：对于任意整数 $x(\bmod{p})$ 的逆元表示为：</p>
<p>$$x^{-1}(\bmod n)$$</p>
<p><strong>逆元存在性定理</strong>：$x$ 在模 $p$ 同余下存在逆元当且仅当 $gcd(x, p) = 1$</p>
<p>可通过反证法进行证明，若需详细步骤请自行查阅资料。</p>
<h3>性质</h3>
<p><strong>定理</strong>：模 $p$ 同余下，一个整数 $x$ 的逆元若存在，则唯一。<br />
<strong>证明</strong>：考虑反证法；假设 $x$ 有两个不同的逆元 $i_1，i_2$，满足 $xi_1 \equiv 1 \pmod{p} $，$xi_2 \equiv 1 \pmod{p} $。根据同<br />
余的传递性，$xi_1 \equiv xi_2 \pmod{p} $在同余号两侧左乘 $i_1$，得到：$(i_1x)i_1 ≡ (i_1x)i_2\pmod p ⇐⇒ 1i_1 ≡ 1i_2 \pmod p$</p>
<p><strong>定理</strong>：在模质数 $p$ 同余下，$[1, p − 1]$ 内所有整数的逆元互不相同。<br />
<strong>证明</strong>：反证，假设 $x$, $y$ 的逆元均为 $i$，则 $x_i ≡ y_i \pmod p$。两侧同乘 $i^{−1}$ 立得 $x ≡ y \pmod p$，矛盾。</p>
<p><strong>定理</strong>：一个数的逆元的逆元等于它自身。<br />
<strong>证明</strong>：由模意义下乘法交换律和结合律立得。</p>
<h3>通过扩展欧几里得(exgcd)  计算逆元</h3>
<p>对任意给定的 $x$ 和 $p$，显然 $x × x^{−1} ≡ 1 \pmod p$ 可以利用这个式子计算 x^{−1}。</p>
<p>上式等价于 $xx^{−1} = kp + 1 ⇐⇒ xx^{−1} + pk = 1$。</p>
<p>其中 $x$ 和 $p$ 是已知量，所以上式是一个不定方程，$x^{−1}$ 和 $k$是变量。用 $exgcd$ 求解可以得到 $x^{−1}$。</p>
<p>根据不定方程有解的条件，$gcd(x, p) | 1 ⇐⇒ gcd(x, p) = 1$。这和逆元存在性定理也是相适应的。</p>
<h3>欧拉定理</h3>
<p><strong>欧拉定理 (Euler Theorem)</strong>：对任意正整数 $a$, $m$ 且 $gcd(a, m) = 1$，一定有：$a^{\varphi (m)} ≡ 1 \pmod m$</p>
<p>证明自行查阅资料</p>
<h3>费马小定理</h3>
<p><strong>费马小定理（Fermat’s Little Theorem）</strong>：对任意整数 $a$ 和质数 $p$，$a^{p−1} ≡ 1 \pmod p$。</p>
<p>证明请自行查阅资料</p>
<h4>通过费马小定理求逆元</h4>
<p>根据费马小定理，$a^{p−1} ≡ 1\pmod p$。</p>
<p>两侧同乘 $a^{−1}$，得到 $a^{−1} ≡ a^{p−2} \pmod p$。</p>
<p>这就得到了逆元的第二种求法：快速幂求出 $a^{p−2}\pmod p$即可。</p>
<p>设 $inv_i$ 表示 $i$ 的逆元，有递推式：</p>
<p>$ inv_{i} ≡ − ⌊\frac{p}{i} ⌋ × inv _{p \mod i} \pmod p $</p>
<p>边界为 $inv_1 = 1$。</p>
<h2>中国剩余定理</h2>
<h3>中国剩余定理问题</h3>
<p>我们给定 $N$ 个线性同余方程组：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mstyle mathsize="1.44em"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnspacing="1em" rowspacing="4pt"><mtr><mtd><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>1</mn></msub><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><msub><mi>m</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>2</mn></msub><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mo>…</mo></mtd></mtr><mtr><mtd><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mi>n</mi></msub><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><msub><mi>m</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></mstyle></mrow></math></p>
<p>其中保证 $m_1, m_2, \dots ,m_n$ 两两互质。求 $x$ 的通解</p>
<h3>定理</h3>
<p><strong>中国剩余定理 (Chinese Remainder Theoremm, CRT)</strong>：上页方程组有解，且按如下方式构造：</p>
<p>记 $M = \prod m_i，M_i = m{\div m_i} $，$t_i$ 是 $M_i$ 在模 $m_i$ 群下的逆元。</p>
<p>则该方程的唯一通解是：</p>
<p>$$x \equiv \sum_{i=1}^{n} a_it_iM_i \pmod{M} $$</p>
<p>举例来说：对于以下线性同余方程组：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mstyle mathsize="1.44em"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnspacing="1em" rowspacing="4pt"><mtr><mtd><mi>x</mi><mo>≡</mo><mn>1</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>5</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mi>x</mi><mo>≡</mo><mn>2</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>5</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mi>x</mi><mo>≡</mo><mn>3</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>7</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></mstyle></mrow></math></p>
<p>$$M = 3\cdot 5\cdot 7=105$$</p>
<p>$$M_1=M/3=105/3=35$$</p>
<p>$$M_2=105/5=21$$</p>
<p>$$M_3=105/7=15$$</p>
<p>接下来为了确定 $t_i$ 我们需要解以下同余方程：</p>
<p>$$M_it_i \equiv 1 \pmod{m_i}$$</p>
<p>所以说我们可以得到：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mstyle mathsize="1.44em"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnspacing="1em" rowspacing="4pt"><mtr><mtd><mn>35</mn><msub><mi>t</mi><mn>1</mn></msub><mo>≡</mo><mn>1</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>3</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>21</mn><msub><mi>t</mi><mn>2</mn></msub><mo>≡</mo><mn>1</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>5</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>15</mn><msub><mi>t</mi><mn>3</mn></msub><mo>≡</mo><mn>1</mn><mspace width="0.444em"></mspace><mo stretchy="false">(</mo><mi>mod</mi><mspace width="0.333em"></mspace><mn>7</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></mstyle></mrow></math></p>
<p>我们可以解得：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mstyle mathsize="1.44em"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnspacing="1em" rowspacing="4pt"><mtr><mtd><msub><mi>t</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn></mtd></mtr><mtr><mtd><msub><mi>t</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn></mtd></mtr><mtr><mtd><msub><mi>t</mi><mn>3</mn></msub><mo>=</mo><mn>1</mn></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></mstyle></mrow></math></p>
<p>最后我们通过上面的那个式子可以算出：</p>
<p>$$x \equiv 1\cdot 2\cdot 35+2\cdot 1\cdot 21+3\cdot 1\cdot 15 \equiv157\equiv52  \pmod{105}$$</p>
<p>故 $x = 52$</p>
<h1>组合数学</h1>
<h2>排列组合常用公式</h2>
<p>从m个东西中</p>
<p>排列数(在乎顺序)：$A^m_n=\frac{n!}{(n-m)!} $</p>
<p>组合数（不在乎顺序）：$C^m_n = \frac{ {\textstyle \prod_{n-m+1}^{n}}}{m!}$</p>
<p>简化公式的推理如下:</p>
<p>$$C^m_n=\frac{n!}{m!(n-m)!} $$</p>
<p>$$= \frac{ {\textstyle \prod_{1}^{n}} }{{\textstyle \prod_{1}^{m} } {\textstyle \prod_{1}^{n-m} }}$$</p>
<p>$$= \frac{ {\textstyle \prod_{1}^{n-m}}{\textstyle \prod_{n-m+1}^{n}} }{{\textstyle \prod_{1}^{m} } {\textstyle \prod_{1}^{n-m} }}$$</p>
<p>$$= \frac{ {\textstyle \prod_{n-m+1}^{n}} }{{\textstyle \prod_{1}^{m}  }}$$</p>
<p>$$= \frac{ {\textstyle \prod_{n-m+1}^{n}}}{m!}$$</p>
<p>隔板法：$C^{m-1}_{n+m-1}$</p>
<p>错位排列公式：$D_n=(n-1)*(D_{n-1}+D_{n-2})$</p>
<p>一个数列的全排列的个数是数列的数的个数的阶乘除以每个数出现的次数的阶乘</p>
<p>*<em>以上公式的详细证明请自行搜索（或者有空了我在写）</em></p>
<h2>运用费马小定理求解组合数</h2>
<p>求解 $C^m_n \mod p $ ($p$ 为质数) 的值</p>
<p>已知：</p>
<p>$$C^m_n=\frac{n!}{m!(n-m)!} $$</p>
<p>可以转化为 $n!$ 乘上 $m!(n-m)!$ 的逆元</p>
<p>由前文费马小定理可知一个数 $a \mod p$ 的逆元就是 ${a!}^{p-2}$</p>
<p>用代码实现非常的轻松：</p>
<pre><code class="language-cpp">typedef long long ll;
const int mod = p; //p是质数

int fac[maxn], inv[maxn]; // fac[i]，inv[i] 分别代表 i! 和 i 的逆元

ll QuiclPow(ll x, ll y) { //快速幂
    ll ans = 1;
    while(y != 0) {
        if(y &amp; 1) ans = ans * x % mod;
        x = x * x % mod;
        y &gt;&gt;= 1;
    }
    return ans;
}

void init() {
    fac[0] = 1;
    //inv[0] = 1;
    for(int i = 1; i &lt;= maxn - 5; i++) {
        fac[i] = fac[i - 1] * i % mod; //计算阶乘
        inv[i] = QuiclPow(fac[i], mod - 2); //费马小定理求解逆元
    }
}</code></pre>
<p>知道了逆元之后我们也知道了阶乘，就可以愉快的求出组合数了awa</p>
<pre><code class="language-cpp">C = fac[n] * inv[m] % mod * inv[n - m] % mod;</code></pre>
<h1>线性代数</h1>
<h2>矩阵</h2>
<p>通俗易懂的说，矩阵在 OI 中就是一个二维数组。</p>
<h3>矩阵乘法</h3>
<p>对于一个矩阵 $A$：</p>
<p><code class="katex-inline">\begin{bmatrix} a_{11} &  a_{12} &  a_{13}\\ a_{21}  &  a_{22} &  a_{23}\end{bmatrix}</code></p>
<p>一个矩阵 $B$：</p>
<p><code class="katex-inline">\begin{bmatrix} b_{11} &  b_{12}\\ b_{21}  &  b_{22}\\ b_{31}  & b_{32}\end{bmatrix}</code></p>
<p>矩阵 $C$ 为 $A、B$ 的乘积，记为 $C = A \times B$ 。</p>
<p>$A$ 的行数列数分别为 $n、m$ ，$B$ 的行数列数分别为 $x、y$。</p>
<p>当且仅当 $m=x$ 的时候两个矩阵才能相乘，矩阵乘法不满足乘法交换律，但满足乘法结合律。因为若交换两个矩阵，原先的限制条件变为 $n=y$ 不一定成立。</p>
<p>新矩阵的表示方法如下：</p>
<p><code class="katex-inline">\sum_{i=1}^{n} \sum_{j=1}^{y}c_{ij}=\sum_{k_1}^{m或x} a_{ik} \times a_{k_j}</code></p>
<p>通俗易懂的来说：</p>
<p><code class="katex-inline">\begin{bmatrix} a_{11}\times b_{11} +  a_{12}\times b_{21} + a_{13}\times b_{31}& \cdots \\  \cdots & a_{21}\times b_{12} +  a_{22}\times b_{22} + a_{23}\times b_{32}\end{bmatrix}</code></p>
<h3>矩阵加速递推</h3>
<p>众所周知，斐波那契数列的递推式如下：</p>
<p><code class="katex-inline">F_n = \left\{\begin{aligned} 1 \space (n \le 2) \\ F_{n-1}+F_{n-2} \space (n\ge 3) \end{aligned}\right.</code></p>
<p>当 $n \le 1 \times 10^9$ 时，通过 $O(n)$ 的方法还是可以勉强计算出 $F_n$ 的值的，但当 $n \le 1 \times 10^{18}$ 时呢？很显然这辈子我们都见不到这个问题的答案了。</p>
<p>为了优化这个递推式，我们就可以用到矩阵快速幂，也就是矩阵加速递推的方式来解答。</p>
<p>矩阵乘计算线性递推式时，需要一个数列矩阵和一个参数矩阵。数列矩阵中的一个值就代表着一个项，参数矩阵就是用来转移数列矩阵的矩阵，这样当我们在计算下一个函数值的时候只需要将数列矩阵乘上参数矩阵，通过斐波那契的例子来帮助我们理解这个问题。</p>
<p>数列矩阵如下：</p>
<p><code class="katex-inline">\begin{bmatrix}F_n &F_{n-1}\end{bmatrix}</code></p>
<p>已知 $F<em>{n+1} = F</em>{n} + F_{n-1}$。<br />
所以参数矩阵为 </p>
<p><code class="katex-inline">\begin{bmatrix} 1 & 1\\ 1 & 0\end{bmatrix}</code></p>
<p>意味着新的数列矩阵为：</p>
<p><code class="katex-inline">\begin{bmatrix} F_n+F_{n-1}& F_n\\\end{bmatrix}</code></p>
<p>就是：</p>
<p><code class="katex-inline">\begin{bmatrix} F_{n+1}& F_n\\\end{bmatrix}</code></p>
<p>循环往复，直到得出结果为止，可通过快速幂实现。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/08/16/oi%e5%ad%a6%e4%b9%a0-%e6%95%b0%e5%ad%a6/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
