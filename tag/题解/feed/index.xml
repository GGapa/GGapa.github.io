<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>题解 &#8211; GGapa&#039;s website</title>
	<atom:link href="http://ggapa.net/tag/%E9%A2%98%E8%A7%A3/feed/?simply_static_page=1950" rel="self" type="application/rss+xml" />
	<link>https://ggapa.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 12 Nov 2023 14:49:36 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>https://ggapa.github.io/wp-content/uploads/2023/08/cropped-Untitled-32x32.png</url>
	<title>题解 &#8211; GGapa&#039;s website</title>
	<link>https://ggapa.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>P8948 [YsOI2022] NOIp 和省选 题解</title>
		<link>https://ggapa.github.io/2023/11/11/p8948-ysoi2022-noip-%e5%92%8c%e7%9c%81%e9%80%89-%e9%a2%98%e8%a7%a3/</link>
					<comments>https://ggapa.github.io/2023/11/11/p8948-ysoi2022-noip-%e5%92%8c%e7%9c%81%e9%80%89-%e9%a2%98%e8%a7%a3/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sat, 11 Nov 2023 14:51:05 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[题解]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=853</guid>

					<description><![CDATA[题目传送门 这道题是一个构造题，只要是一个构造题就不用管样例的输入输出，样例的输入输出仅用于理解题意对于一般的 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P8948">题目传送门</a></p>
<p>这道题是一个构造题，只要是一个构造题就不用管样例的输入输出，样例的输入输出仅用于理解题意对于一般的构造题来说，并不需要那么多花里胡哨的方法。</p>
<p>题目中说明<strong>四舍五入保留到整数</strong>，但是为什么题目说什么你就做什么呢？当然可以不用四舍五入，而且代码也非常的简洁，但是完成代码前的推导是需要一点时间的。</p>
<p>题目中说明 $A$ 的最大值为 $400$，$B$ 的最大值为 $600$，但不能使用最大值来完成题目。通俗的讲，如果除数是 $600$ ，那么商可能是一个无限循环小数，这并不有利于我们进行操作。干脆 $B$ 直接取 $500$ 好了，又方便。$A$ 可以等于 $400$。理论上来说 $A$ 为 $200$ ，$B$ 为 $400$ 等。也是可行的。如果他们被当作除数的话有利于我们进行计算。在这里我们取 $A = 400,B=500$ 。他们足够大，能覆盖到所有 $[10,1990]$ 的数。</p>
<p>确定完 $A,B$ 的值后，我们开始考虑求 $a_i,b_i$ 。已知 $c_i = 1000(\frac{a_i}{A}+\frac{b_i}{B})$ ，故 $c_i = 1000\cdot \frac{a_i}{A}+1000\cdot\frac{b_i}{B}$  ，我们发现 当 $(1000\cdot\frac{b_i}{B})$ 是奇数时，$b_i$ 不可能为整数，只可能是以 $.5$ 为结尾的小数，你可能会想直接四舍五入，但是那样子太麻烦了，我们可以直接从 $1000\cdot \frac{a_i}{A}$ 中找一个 $0.5$ ，使二者抵消。如 $a_i=2$ 时，$1000\cdot \frac{a_i}{A}=5$ ，此时可以轻易的推出 $b_i = 495$。若 $(1000\cdot\frac{b_i}{b})$ 不是奇数的时候，这时就可以随便拿一个你喜欢的奇数来进行运算，反正最终的答案一定都能满足。但是在这两种情况下， $a_i$ 的值都不应该大于 $4$，若大于则可能导致取不到最小值。</p>
<p>在实现程序的时候可以先实现 $c_i &lt; 1000$ 的情况，接着推广到 $c_i \ge 1000$  的情况，请读者自行思考如何实现程序。</p>
<p>综上所述，若 $(1000\cdot\frac{b_i}{B})$ 为奇数，则 $(1000\cdot\frac{a_i}{A})$ 是以 $.5$ 结尾的小数。若 $(1000\cdot\frac{b_i}{B})$ 是偶数，则 $a_i$ 是一个奇数。</p>
<p>这意味着在实现程序的时候对于<strong>每一种情况</strong>都需要找到一个<strong>固定</strong>的 $a'$ 来求解 $b_i$ 。$a_i \le 4(c_i &lt; 1000)$</p>
<p>这道题目的解法说明了什么？面对构造题我们不能掉进出题人的圈套。</p>
<p><a href="https://www.luogu.com.cn/record/134626703">AC代码</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/11/11/p8948-ysoi2022-noip-%e5%92%8c%e7%9c%81%e9%80%89-%e9%a2%98%e8%a7%a3/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>2023.10.30 学习笔记(野人过河)</title>
		<link>https://ggapa.github.io/2023/11/01/2023-10-30-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e9%87%8e%e4%ba%ba%e8%bf%87%e6%b2%b3/</link>
					<comments>https://ggapa.github.io/2023/11/01/2023-10-30-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e9%87%8e%e4%ba%ba%e8%bf%87%e6%b2%b3/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Wed, 01 Nov 2023 05:24:06 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[题解]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=790</guid>

					<description><![CDATA[题目描述 有三个野人三个道士，他们在何的右岸，现有一艘只能容纳两个人的小船，因为野人比较野蛮，如果河一侧野人的 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h4>题目描述</h4>
<p>有三个野人三个道士，他们在何的右岸，现有一艘只能容纳两个人的小船，因为野人比较野蛮，如果河一侧野人的数量大于道士的数量，野人就会攻击道士，问如何安全的过河。输出任意一种方案。</p>
<h4>问题分析</h4>
<p>这道题目可以通过搜索来实现，广搜和深搜均可，在这里为了锻炼使用广搜的代码能力，笔者决定用广搜来解答这道题目。</p>
<p>为了进行广搜我们需要创建一个三元组$(x, (y, z))$，分别代表着河右岸道士的人数，野人的人数，船在左侧还是在右侧，其中记 $1$ 为船在右侧，记 $0$ 为船在左侧。就可以通过两种情况进行分类讨论。</p>
<p>当 $z=1$ 时，有以下几种情况：</p>
<ul>
<li>两个道士到达左岸</li>
<li>一个道士一个野人到达左岸</li>
<li>一个道士到达左岸</li>
<li>一个野人到达左岸</li>
<li>两个野人到达左岸。</li>
</ul>
<p>当 $z=2$ 时的情况与上文相近，只是从左岸到达右岸。</p>
<p>分析完毕后，我们可以得到以下的转移数组：</p>
<pre><code class="language-cpp">int dx[10] =  {-1, -1, -2, 0, 0, 1, 1, 2, 0, 0};
int dy[10] =  {-1, 0, 0, -1, -2, 1, 0, 0, 2, 1};</code></pre>
<p>其中 $0-5$ 号元素代表着船在右岸的情况，剩余的元素代表船在左岸的情况。在转移的时候要判断状态的合法性，切记如果某一时刻道士的人数为 $0$ 野人是无法攻击道士的。</p>
<p>因为题目要求需要输出合法的方案，故在广搜的时候我们需要通过链表记录一下这个状态的上一个转台，最后从最后的状态开始，倒序输出。倒序输出可以通过栈来实现，这里不做过多的讲解。</p>
<h4>参考代码</h4>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

int dx[10] =  {-1, -1, -2, 0, 0, 1, 1, 2, 0, 0};
int dy[10] =  {-1, 0, 0, -1, -2, 1, 0, 0, 2, 1};
int used[5][5][5];
int n = 3;
map&lt;pair&lt;int, pair&lt;int, int&gt;&gt;, pair&lt;int, pair&lt;int, int&gt;&gt;&gt; ans;

void out() {
    stack&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; tmp;
    pair&lt;int, pair&lt;int, int&gt;&gt; it =  make_pair(0, make_pair(0, 0)), ed = make_pair(3, make_pair(3, 1));
    do{
        tmp.push(it);
        it = ans[it];
    }while(it != ed);
//  cout &lt;&lt; it.first &lt;&lt; &quot; &quot; &lt;&lt; it.second.first &lt;&lt; &quot; &quot; &lt;&lt; it.second.second &lt;&lt; &quot;\n&quot;;
    tmp.push(it);
    while(!tmp.empty()) cout &lt;&lt; tmp.top().first &lt;&lt; &quot; &quot; &lt;&lt; tmp.top().second.first &lt;&lt; &quot; &quot; &lt;&lt; tmp.top().second.second &lt;&lt; &quot;\n&quot;, tmp.pop();
    exit(0);
}

void bfs() {
    queue&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; q;

    q.push(make_pair(3, make_pair(3, 1)));
    while(!q.empty()) {
        if(q.front() == make_pair(0, make_pair(0, 0)))  {
            out();
            return ;
        }
        int x = q.front().first, y = q.front().second.first; 
        if(q.front().second.second) {
            for(int i = 0; i &lt; 5; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if((nx &lt; ny &amp;&amp; nx != 0) || (n - nx &lt; n - ny &amp;&amp; nx != 3)|| used[nx][ny][0] != 0|| nx &lt; 0 || ny &lt; 0|| nx &gt; n || ny &gt; n) continue;
                used[nx][ny][0] = 1;
                q.push(make_pair(nx, make_pair(ny, 0)));
                ans[make_pair(nx, make_pair(ny, 0))] = make_pair(x, make_pair(y, 1));
            }
        }
        else {
            for(int i = 5; i &lt; 10; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if((nx &lt; ny &amp;&amp; nx != 0) || (n - nx &lt; n - ny &amp;&amp; nx != 3)||used[nx][ny][1] != 0|| nx &lt; 0 || ny &lt; 0|| nx &gt; n || ny &gt; n) continue;
                used[nx][ny][1] = 1;
                q.push(make_pair(nx, make_pair(ny, 1)));
                ans[make_pair(nx, make_pair(ny, 1))] = make_pair(x, make_pair(y, 0));
            }
        }
        q.pop();
    }
} 

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
//  freopen(&quot;AKIOI.in&quot;, &quot;r&quot;, stdin);
//  freopen(&quot;AKIOI.out&quot;, &quot;w&quot;, stdout);
    bfs();
    return 0;
}
</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/11/01/2023-10-30-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e9%87%8e%e4%ba%ba%e8%bf%87%e6%b2%b3/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
