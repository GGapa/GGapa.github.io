<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>提高效率 &#8211; GGapa&#039;s website</title>
	<atom:link href="http://ggapa.net/tag/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/feed/?simply_static_page=2619" rel="self" type="application/rss+xml" />
	<link>https://ggapa.github.io/</link>
	<description></description>
	<lastBuildDate>Sat, 14 Oct 2023 16:13:58 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>https://ggapa.github.io/wp-content/uploads/2023/08/cropped-Untitled-32x32.png</url>
	<title>提高效率 &#8211; GGapa&#039;s website</title>
	<link>https://ggapa.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>算法竞赛中 sort 的使用</title>
		<link>https://ggapa.github.io/2023/10/03/%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e4%b8%ad-sort-%e7%9a%84%e4%bd%bf%e7%94%a8/</link>
					<comments>https://ggapa.github.io/2023/10/03/%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e4%b8%ad-sort-%e7%9a%84%e4%bd%bf%e7%94%a8/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Tue, 03 Oct 2023 14:18:05 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[sort]]></category>
		<category><![CDATA[提高效率]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=656</guid>

					<description><![CDATA[sort 算法竞赛中的每一毫秒都是珍贵的 而 sort 的不恰当使用会浪费很多额外的时间，尤其是在数据量较大的 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>sort</h1>
<p>算法竞赛中的每一毫秒都是珍贵的<br />
而 <code>sort</code> 的不恰当使用会浪费很多额外的时间，尤其是在数据量较大的时候。<br />
平时阅读题解的时候发现很多大佬都会这样子写 <code>sort</code> :</p>
<pre><code class="language-cpp">sort(a + 1, a + 1 + n, [](const int&amp; x, const int&amp; y) { return x &gt; y; });</code></pre>
<p>或者是这样</p>
<pre><code class="language-cpp">sort(a + 1, a + 1 + n, []greater());</code></pre>
<p>的确这样子写都能加快程序运行的时间，相比于通过传递的 <code>sort</code> 写法：</p>
<pre><code class="language-cpp">...
bool cmp(int x, int y) {
    return x &gt; y;
}
...
sort(a + 1, a + 1 + n, cmp);
...</code></pre>
<p>这样子写每一次在调用的时候都会定义两个变量 x、 y 造成程序的效率降低，在使用结构体的时候尤其明显。</p>
<h1>例子</h1>
<p><a href="https://www.luogu.com.cn/problem/UVA11729">UVA11729 Commando War</a></p>
<p>分别使用以下两份 C++ 代码</p>
<pre><code class="language-cpp">/*
Commando War
https://vjudge.csgrandeur.cn/contest/584210#problem/A
*/
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
const int maxn = 1005;

struct Work {
    int pre, spd;
}work[maxn];

bool cmp(Work x, Work y) {
    return x.spd &gt; y.spd;
}

int n;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int it = 0;
    while(true) {
        cin &gt;&gt; n;
        it++;
        if (n == 0) break;
        for(int i = 1; i &lt;= n; i++)
            cin &gt;&gt; work[i].pre &gt;&gt; work[i].spd;
        sort(work + 1, work + 1 + n, cmp);
        int ans1 = 0, ans2 = 0;
        for(int i = 1; i &lt;= n; i++) {
            ans1 += work[i].pre;
            ans2 = max(ans2, ans1 + work[i].spd);
        }
        cout &lt;&lt; &quot;Case &quot; &lt;&lt; it &lt;&lt; &quot;: &quot; &lt;&lt; ans2 &lt;&lt; endl;
    }
    return 0;
}

/*
编程语言
C++14 (GCC 9)
代码长度
843B
用时
10ms
内存
0B
*/</code></pre>
<pre><code class="language-cpp">/*
Commando War
*/
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
const int maxn = 1005;

struct Work {
    int pre, spd;
}work[maxn];

/*
bool cmp(Work x, Work y) {
    return x.spd &gt; y.spd;
}
*/

int n;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int it = 0;
    while(true) {
        cin &gt;&gt; n;
        it++;
        if (n == 0) break;
        for(int i = 1; i &lt;= n; i++)
            cin &gt;&gt; work[i].pre &gt;&gt; work[i].spd;
        sort(work + 1, work + 1 + n,
         [](const Work&amp; x, const Work&amp; y) { return x.spd &gt; y.spd; });
        int ans1 = 0, ans2 = 0;
        for(int i = 1; i &lt;= n; i++) {
            ans1 += work[i].pre;
            ans2 = max(ans2, ans1 + work[i].spd);
        }
        cout &lt;&lt; &quot;Case &quot; &lt;&lt; it &lt;&lt; &quot;: &quot; &lt;&lt; ans2 &lt;&lt; &quot;\n&quot;;
    }
    return 0;
}
/*
编程语言
C++14 (GCC 9)
代码长度
916B
用时
0ms
内存
0B
*/</code></pre>
<p>*<em>UVA 的测评机十分感人，可能与实际数据相比可能有偏差</em></p>
<p>在 $n \le 1000$ 的情况下，足足慢了 10ms （可能还不止，），由此可见二者的效率差距</p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/10/03/%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e4%b8%ad-sort-%e7%9a%84%e4%bd%bf%e7%94%a8/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
