<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>动态规划 &#8211; GGapa&#039;s website</title>
	<atom:link href="http://ggapa.net/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/feed/?simply_static_page=1914" rel="self" type="application/rss+xml" />
	<link>https://ggapa.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 18 Feb 2024 12:21:09 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>https://ggapa.github.io/wp-content/uploads/2023/08/cropped-Untitled-32x32.png</url>
	<title>动态规划 &#8211; GGapa&#039;s website</title>
	<link>https://ggapa.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>LCS</title>
		<link>https://ggapa.github.io/2024/02/18/lcs/</link>
					<comments>https://ggapa.github.io/2024/02/18/lcs/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sun, 18 Feb 2024 12:21:09 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[动态规划]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=1118</guid>

					<description><![CDATA[LCS——经典的 DP 问题，给定两个长度为 $n$ 的排列，试问二者的最长公共子序列。这是经典的区间 DP  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>LCS——经典的 DP 问题，给定两个长度为 $n$ 的排列，试问二者的最长公共子序列。这是经典的区间 DP 问题，</p>
<p>首先考虑朴素做法，定义 $dp[i][j]$ 来表示第一个串的前 $i$ 位，第二个串的前 $j$ 的 $LCS$ 长度，易得状态转移方程：</p>
<ul>
<li>
<p>如果两个序列没有新的相同元素</p>
<p>$dp[i][j] = \max(dp[i-1][j],dp[i][j-1])$</p>
</li>
<li>
<p>否则</p>
<p>$dp[i][j]= \max(dp[i][j],dp[i-1][j-1]+1)$</p>
<p>时间复杂度 $O(n^2)$ 。</p>
</li>
</ul>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;
const int maxn = 1e4 + 5;

int a[maxn], b[maxn], f[maxn][maxn];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin &gt;&gt; n;
    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];
    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; b[i];
    for(int i = 1; i &lt;= n; i++) {
        for(int j = 1; j &lt;= n; j++) {
            f[i][j] = max(f[i-1][j], f[i][j-1]);
            if(a[i] == b[j]) f[i][j] = max(f[i][j], f[i-1][j-1] + 1);
        }
    }
    cout &lt;&lt; f[n][n] &lt;&lt; &quot;\n&quot;;
    return 0;
}</code></pre>
<p>由于时间复杂度中惨了一份平方，所以说在大多数题目下都不适用，此时考虑进行优化。试着将 $LCS$ 问题转换成 $LIS$ 问题，因为我们两个排列，而排列中的所有元素均不相同，因此可以根据其出现的位置，把元素重新编号。</p>
<p>解释：</p>
<blockquote>
<p>因为<strong>最长公共子序列是按位向后比对的，所以a序列每个元素在b序列中的位置如果递增，就说明b中的这个数在a中的这个数整体位置偏后</strong>。</p>
<p>—— 离散小波变换</p>
</blockquote>
<p>时间复杂度 $O(n \log n)$。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define rep(i, a, b) for (int i = (a), stOwxc = (b); i &lt;= stOwxc; i++)
#define per(i, a, b) for (int i = (a), stOwxc = (b); i &gt;= stOwxc; i--)
using namespace std;
typedef long long ll;

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, x;
    cin &gt;&gt; n;
    unordered_map&lt;int, int&gt; mp;
    rep(i, 1, n) cin &gt;&gt; x, mp[x] = i;
    vector&lt;int&gt; L;
    rep(i, 1, n) {
        cin &gt;&gt; x;
        if (!mp.count(x))
            continue;
        int s = mp[x];
        auto it = lower_bound(L.begin(), L.end(), s);
        if (it == L.end())
            L.push_back(s);
        else
            *it = s;
    }
    cout &lt;&lt; L.size() &lt;&lt; &#039;\n&#039;;
    return 0;
}</code></pre>
<p>注意：</p>
<ul>
<li><code>map</code> 的常数稍大，可以考虑 <code>unordered_map</code> 来解决问题，在洛谷模板题中，后者比前者快了 $50\%$ 。</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2024/02/18/lcs/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>环上最大独立集问题</title>
		<link>https://ggapa.github.io/2023/11/12/%e7%8e%af%e4%b8%8a%e6%9c%80%e5%a4%a7%e7%8b%ac%e7%ab%8b%e9%9b%86%e9%97%ae%e9%a2%98/</link>
					<comments>https://ggapa.github.io/2023/11/12/%e7%8e%af%e4%b8%8a%e6%9c%80%e5%a4%a7%e7%8b%ac%e7%ab%8b%e9%9b%86%e9%97%ae%e9%a2%98/#respond</comments>
		
		<dc:creator><![CDATA[GGapa]]></dc:creator>
		<pubDate>Sun, 12 Nov 2023 09:34:16 +0000</pubDate>
				<category><![CDATA[OI]]></category>
		<category><![CDATA[动态规划]]></category>
		<guid isPermaLink="false">https://ggapa.github.io/?p=870</guid>

					<description><![CDATA[环上最大独立集 题目描述 给出一个有 $n$ 个点的环，每个点有点权 $a_i$，求满足点集内任何两个点在环上 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>环上最大独立集</h1>
<h2>题目描述</h2>
<p>给出一个有 $n$ 个点的环，每个点有点权 $a_i$，求满足点集内任何两个点在环上不相邻，且点权和最大的点集的点权和。<br />
注意点 $1$ 和 点 $n$ 是相邻的。</p>
<h2>输入格式</h2>
<p>第一行输入一个正整数 $n$，表示点的数目。<br />
第二行输入 $n$ 个以空格隔开的整数，依次表示各个点的点权 $a_i$。</p>
<h2>输出格式</h2>
<p>输出一行一个整数，表示求得的最大点权和。</p>
<h2>样例 #1</h2>
<h3>样例输入 #1</h3>
<pre><code>7
2 -2 8 6 -1 -5 5</code></pre>
<h3>样例输出 #1</h3>
<pre><code>13</code></pre>
<h2>提示</h2>
<p>对于 $50\%$ 的数据满足 $n\le 18$；<br />
对于 $100\%$ 的数据满足 $2\le n\le 10^5,|a_i|\le 10^9$。</p>
<h1>解题方法</h1>
<p>若不考虑环，此题的转移方程如下：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></math><br />
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mo data-mjx-texclass="OP" movablelimits="true">max</mo><mo fence="false" stretchy="false">{</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo fence="false" stretchy="false">}</mo></math></p>
<p>其中 $f[i][1]$ 代表第 $i$ 个元素要取，$f[i][0]$ 代表第 $i$ 个元素不取。若第 $i$ 个元素要取，则第 $i-1$ 个元素不能取。若第 $i$ 个元素不取，则第 $i-1$ 个元素可取可不取。以上便是转移方程的由来。</p>
<p>若按照传统的化环成链方法，时间复杂度为 $O(n^2)$ 很明显不能通过本题，但是我们可以从这个方法展开思考。为什么要化环成链？因为在环里，$1$ 号元素和 $n$ 号元素是靠在一起的，若 $1$ 取，则 $n$ 号元素不能取，反之亦然。我们就可以分情况进行动态规划，第一种情况是当 $1$ 号元素不取的时， $n$ 号元素可取可不取。第二种情况是当第 $n$ 号元素取时，则 $1$ 号元素可取可不取。</p>
<p>为了达到此目的，情况一我们可以将 $f[1][0]$ 的值设为 $-\infty$ ，情况二可以将 $f[1][1]$ 的值设为 $-\infty$。接着进行上述动态规划，问题即可迎刃而解。</p>
<p><a href="https://www.luogu.com.cn/record/134763290">AC 代码</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://ggapa.github.io/2023/11/12/%e7%8e%af%e4%b8%8a%e6%9c%80%e5%a4%a7%e7%8b%ac%e7%ab%8b%e9%9b%86%e9%97%ae%e9%a2%98/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
